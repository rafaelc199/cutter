from typing import Any, Optional, List, Iterator

class Stream:
    def download(self, output_path: Optional[str] = None, filename: Optional[str] = None) -> str: ...
    title: str
    resolution: str

class StreamQuery:
    def filter(self, progressive: Optional[bool] = None, file_extension: Optional[str] = None) -> 'StreamQuery': ...
    def first(self) -> Optional[Stream]: ...
    def order_by(self, attribute: str) -> 'StreamQuery': ...
    def desc(self) -> 'StreamQuery': ...
    def asc(self) -> 'StreamQuery': ...
    def __iter__(self) -> Iterator[Stream]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Stream: ...

class YouTube:
    def __init__(self, url: str, on_progress_callback: Optional[Any] = None, on_complete_callback: Optional[Any] = None, proxies: Optional[dict] = None) -> None: ...
    streams: StreamQuery
    title: str
    description: str
    rating: float
    length: int
    views: int
    thumbnail_url: str
    embed_url: str
    age_restricted: bool
    
    def check_availability(self) -> None: ...